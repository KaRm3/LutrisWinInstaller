#!/bin/bash

yaml_maker() {
  if [ -d "$HOME/lutrisyaml" ]; then
     echo "yaml directory exist."
  else
     echo "yaml directory does not exist."
     echo "Directory creation..." 
     mkdir $HOME/lutrisyaml
  fi
  
  read -p "Insert game's name : " gamename
  if [ -z "$gamename" ]; then
     echo "Error, the game must have a name."
     exit 1
  fi   
  read -p "Insert the runner (proton/wine) : " runner
  if [[ "$runner" != "proton" && "$runner" != "wine" ]]; then 
     echo "Error, runner must be either proton or wine."
     exit 1
  elif [ -z $runner ]; then
     echo "Error, you must specify a runner."
     exit 1 
  fi
  read -p "Insert the arch (win32/win64) : " arch
  if [[ "$arch" != "win32" && "$arch" != "win64" ]]; then 
     echo "Error, architecture must be either win32 or win64."
     exit 1
  elif [ -z $arch ]; then
     echo "Error, you must specify the architecture."
     exit 1 
  fi
  executable=$(zenity --file-selection --title="Insert the executable")
  if [ -z $executable ]; then
     echo "Error, you must set an executable."
     exit 1 
  fi
  echo "Giving root privileges to the executable..."
  sudo chmod +x "$executable"
  prefix=$(zenity --file-selection --directory --title="Insert the prefix")
  if [ -z $prefix ]; then 
     echo "Error, you must specify a wine prefix."
     exit 1 
  fi 
  workingdir=$(zenity --file-selection --directory --title="Insert the working directory")
  if [ -z $workingdir ]; then
     echo "Error, you must specify a working directory."
     exit 1
  fi

  fileyaml="$HOME/lutrisyaml/$(basename "$prefix").yml"

  echo "name: \"$gamename\"" >> $fileyaml
  echo "version: \"1.0\"" >> $fileyaml
  echo "slug: \"$(echo "$gamename" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g')\"" >> $fileyaml
  echo "game_slug: \"$(echo "$gamename" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g')\"" >> $fileyaml
  echo "runner: \"$runner\"" >> $fileyaml
  echo "script:" >> $fileyaml
  echo "  game:" >> $fileyaml
  echo "    exe: $executable" >> $fileyaml
  echo "    prefix: $prefix" >> $fileyaml
  echo "    arch: $arch" >> $fileyaml
  echo "    working_dir: $workingdir" >> $fileyaml
  echo "  installer:" >> $fileyaml
  echo "  - task:" >> $fileyaml
  echo "      executable: $executable" >> $fileyaml
  echo "      name: wineexec" >> $fileyaml
  echo "      prefix: $prefix" >> $fileyaml
  echo "  wine:" >> $fileyaml
  echo "    Desktop: true" >> $fileyaml
  echo "    overrides:" >> $fileyaml
  echo "      ddraw.dll: n" >> $fileyaml
  echo "  system:" >> $fileyaml
  echo "    env:" >> $fileyaml
  echo "      SOMEENV: true" >> $fileyaml
}

check_installation() {
  if  ! command -v "$1" &> /dev/null; then
      echo "Error: '$1' is not installed in the system or is not in the PATH."
      exit 1
  else
      echo "'$1' is installed in the system."
  fi
}
check_vulkan() {
  if vulkaninfo &> /dev/null; then
      echo "Vulkan's drivers are installed in the system."
  else
      echo "Error, Vulkan's drivers aren't installed in the systeml."
      exit 1
  fi
}
echo "Checking installed packages..."
check_installation lutris
check_installation wine
check_installation zenity
check_vulkan
echo "All requirements met."
cd "$HOME"
if [ -d "$HOME/games" ]; then
    echo "games directory exist."
else
    echo "games directory does not exist."
    echo "Directory creation..."
    mkdir "$HOME/games"
fi
if [ -d "$HOME/gamesfiles" ]; then
    echo "gamesfiles directory exist."
else
    echo "gamesfiles directory does not exist."
    echo "Directory creation..."
    mkdir "$HOME/gamesfiles"
fi
gamesfiles=$(zenity --file-selection --directory --title="What is the game's data directory ? ")
if [ -z "$gamesfiles" ]; then
   echo "You must select game's data directory."
   exit 1
fi
mv -n $gamesfiles $HOME/gamesfiles
cd games
read -p "What should you call the prefix ? : " prefix1
if [ -z "$prefix1" ]; then 
   echo "Error, you must specify a prefix's name."
fi
mkdir $prefix1
yaml_maker
yamlfile=$(zenity --file-selection --title="Select the yaml file")
if [ -z "$yamlfile" ]; then
   echo "Error, you must select a yamlfile."
   exit 1
fi
lutris -i $yamlfile
read -p "Do you want to keep the yaml file ? (Y/n): " keepyaml
if [ "$keepyaml" = "Y" ] || [ "$keepyaml" = "Yes" ]; then
   echo "OK"
   exit 0 
elif [ "$keepyaml" = "n" ] || [ "$keepyaml" = "no" ]; then
   rm "$fileyaml" && echo "yaml file successfully deleted."
else
   echo "Error, invalid input."
   exit 1
fi 



